#include<iostream>
int main()
{
	/*
	
	Как я себе представляю архитектуру:

	Game -- класс, который взаимодействует с пользователем, обрабатывает клавиатуру
			помнит текущую фигуру и что в данный момент происходит	
			помнит местоположение текущей фигуры
			Создаёт поле Field, причём указывает его размер 		
				field = std::make_shared<Field>( 10, 25 ); 

	Field -- класс, который только хранит "стакан". умеет прибавлять фигуру, удалять, 
			сдвигать ниже, выше и проч. 

			if (field->can_add(figure, x, y) { ... }

			field->add(figure, x, y);
			field->sub(figure, x, y);

	Figure -- класс который исключительно хранит форму фигур. Тут можно использовать 
			через указатель либо по значению. В принципе должно быть так, чтобы внутри фигура могла
			быть любого размера хоть 5х5, а не стандартные 3х3 и всё чтобы при этом продолжало работать.
			В этом случае лучше через указатель (умный), например shared_ptr<>

			figure = Figure::random();
			figure.rotate()
	
	По поводу проекта на гитлаб

		директории Debug, Release, x64/Debug x64/Release и прочии  создаются при построении проекта
		а значит их не нужно включать в список исходников

		Файлы Tetris.vcxproj.filters, Tetris.vcxproj.user -- это тоже временные файлы, они не нужны

		Для проекта нужны только *.h, *.cpp файлы, .sln и .vcxproj	
	
	*/


	return 0;
}
